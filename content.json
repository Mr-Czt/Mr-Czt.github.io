{"pages":[],"posts":[{"title":"使用github搭建个人博客","text":"本文将介绍如何使用github+hexo搭建个人博客。 前言出于很多需要，我们时常需要在网上查找很多的问题和资料，很多的东西看过后就被忘记了，或者保存了一堆书签，最后自己都不记得书签是什么内容了。既然如此，不妨自己搭建一个记录的平台，也方便整理和后期的检索资料，经过一段时间在网上了解后，最后选用了Github + hexo来实现自己的这个想法。 准备工作1.安装Git官方下载地址：(https://git-scm.com/downloads),官方地址下载可能会较慢，也可以使用国内的镜像站：(https://npm.taobao.org/mirrors/git-for-windows/),安装完成后可在cmd窗口使用命令验证： 1$ git --version 若有返回版本信息则表示安装成功；然后，添加自己的账户信息： 12$ git config --global user.name \"username\"$ git config --global user.email \"useremail@mail.com\" 完成后，可以使用以下命令查看设置的信息： 1$ git config --list 2.创建Github Pages仓库首先，需要一个github账号，从Git官网 通过邮箱申请即可，这里不做详细介绍，登录到自己的Github账号，通过”New repository”新建一个仓库用于存放项目文件，新建的仓库需要是public，才能免费使用Github pages功能，仓库名最好命名为”username.github.io”的形式，方便后期使用；注意：新建仓库时，github不允许创建一个空的文件夹，所以，需要在”username.github.io”文件夹下随便的创建一个文件，保证文件夹不为空；打开Git bash窗口，查看电脑是否有SSH Key： 1$ cat ~/.ssh 如果返回”No such file or directory”，说明电脑上面还没有SSH Key，这个时候，需要使用命令生成SSH Key： 1$ ssh-keygen -t rsa -C \"email@youremail.com\" 提示输入密码，可以默认不输入，一路回车即可；然后使用命令查看生成的SSH Key： 1$ cat ~/.ssh/id_rsa.pub 将Key拷贝到剪贴板，然后打开Github界面，进入”Settings”-&gt;”SSH and GPG keys”，将刚刚的key添加到此；然后就可以将上面创建的仓库拉取到本地，进入github页面，点击仓库可以在首页看到”Clone or download”，复制里面的git仓库地址，回到Git bash窗口： 12$ mkdir project //新建一个project目录存放；$ git clone git@github.com:User/username.github.io.git //git仓库地址； 第一次clone的时候会询问是否允许github，输入”yes”即可；然后我们本地的project文件夹下会出现一个新的空文件夹”username.github.io”; 3.安装node.js官方下载地址：(https://nodejs.org/en/download/),同样的，我们可以使用以下命令验证： 12$ node -v$ npm -v 4.安装hexo安装完Git之后，我们可以在桌面右键菜单，选择”Git bash here”, 在打开的窗口输入命令： 1$ npm install hexo-cli -g 安装过程需要一些时间，请耐心等待； 创建项目，并发布到Githubhexo安装完成后，我们开始初始化项目： 1234$ cd project/username.github.io //进入clone下的项目目录下；$ hexo init //初始化hexo项目；$ npm install$ npm install hexo-deployer-git --save 到此，会发现目录下多出了许多的文件，我们可以预览一下现在的效果： 123456789101112131415161718192021222324252627282930313233343536$ hexo gINFO Start processingINFO Files loaded in 203 msINFO Generated: index.htmlINFO Generated: archives/index.htmlINFO Generated: fancybox/blank.gifINFO Generated: fancybox/jquery.fancybox.cssINFO Generated: fancybox/jquery.fancybox.jsINFO Generated: fancybox/jquery.fancybox.pack.jsINFO Generated: fancybox/fancybox_loading.gifINFO Generated: archives/2020/index.htmlINFO Generated: fancybox/fancybox_loading@2x.gifINFO Generated: fancybox/fancybox_sprite@2x.pngINFO Generated: fancybox/fancybox_overlay.pngINFO Generated: archives/2020/01/index.htmlINFO Generated: fancybox/fancybox_sprite.pngINFO Generated: js/script.jsINFO Generated: fancybox/helpers/jquery.fancybox-buttons.cssINFO Generated: css/fonts/FontAwesome.otfINFO Generated: fancybox/helpers/jquery.fancybox-buttons.jsINFO Generated: css/style.cssINFO Generated: fancybox/helpers/jquery.fancybox-media.jsINFO Generated: css/fonts/fontawesome-webfont.eotINFO Generated: css/fonts/fontawesome-webfont.woffINFO Generated: fancybox/helpers/jquery.fancybox-thumbs.cssINFO Generated: fancybox/helpers/jquery.fancybox-thumbs.jsINFO Generated: fancybox/helpers/fancybox_buttons.pngINFO Generated: css/fonts/fontawesome-webfont.svgINFO Generated: 2020/01/20/hello-world/index.htmlINFO Generated: css/fonts/fontawesome-webfont.ttfINFO Generated: css/images/banner.jpgINFO 28 files generated in 653 ms$ hexo sINFO Start processingINFO Hexo is running at http://localhost:4000 . Press Ctrl+C to stop. 打开浏览器，输入”localhost:4000”即可预览当前的网页，其中localhost是电脑的IP；打开网页后，可以看到是一篇默认的”Hello world”； 修改_config.yml文件： 1234567891011121314title: 'title'subtitle: 'subtitle'description: 'description'keywords: '[key1],[key2]'author: 'user'language: zh-CNtimezone: ''...deploy: type: git repository: git@github.com:User/username.github.io.git branch: master 将项目下所有文件上传到github，一些编译的中间文件可以使用.gitignore过滤： 12345678910111213$ cat .gitignore.DS_StoreThumbs.dbdb.json*.lognode_modules/public/.deploy*/$ git add ./*$ git commit -m \"commit infomation\"$ ...$ git push ... //将整个项目push到github； 进入到仓库的Settings页面，往下拉，一直到Github Pages功能，需要把此功能打开，然后在git bash输入： 12$ hexo g$ hexo d 如果前面Deployer安装失败，则此时会报错，需要重新安装一次： 123$ npm install hexo-deployer-git --save$ hexo g$ hexo d 然后，在浏览器输入网址username.github.io就可以查看啦.新建博客请在source/_post/目录下添加md文件，关于博客的写作等问题可以参考Writing后续将继续学习更多的功能…","link":"/2020/01/20/%E4%BD%BF%E7%94%A8github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"},{"title":"在Windows下打包发布Qt编译的程序","text":"环境配置软件环境:qt creator 4.11.0 based on Qt 5.14.0 + Win10;打包工具:windeployqt(Qt自带的，不需要另外安装) + Engima Virtual Box; 打包打开需要打包的Qt工程，以release方式重新构建一次: 编译完成之后，在Qt工程目录中找到生成的.exe文件(如这里的CTools.exe)，该文件的路径一般是： 1(Qt工程的根目录)/build-CTools-Desktop_Qt_5_12_6_MinGW_64_bit-Release/release/CTools.exe 如果你的电脑此时没有配置Qt的环境变量，你双击这个CTools.exe文件是不能运行的，会弹出缺少dll文件的报错信息: 新建一个文件夹，将编译生成的CTools.exe文件拷贝到文件夹下: 然后我们找到Qt的命令行工具: 打开，使用命令”cd /&lt;.exe文件的路径&gt;”进入到存放exe文件的路径下: 输入命令 1windeployqt 程序名 //如windeployqt CTools.exe 回车，将会自动把CTools.exe文件所需的库文件都复制到当前的文件夹下:注意是否会出现报错信息，若是某些库文件复制失败，可能需要手动复制过来; 执行完毕后效果:此时，再次双击CTools.exe可以正常运行;(ps:有可能会缺少一些第三方的库文件，则需要手动去复制过来) 然后，打开安装好的Engima Virtual Box软件: 生成的_boxed.exe文件即可直接双击运行，并且拷贝到其它的电脑也可以正常运行;&lt;Thanks!&gt;","link":"/2020/02/08/Package-and-Release-Qt-programs-under-Windows/"},{"title":"Qt creator工程文件如何使用子文件夹分类","text":"前言环境说明:qt creator 4.11.0 based on Qt 5.14.0 + Win10;对于一个比较大的qt工程，必将存放很多的项目文件，其中有一些项目文件是相关的，我们可以将这些文件存放到一个子目录下，这样可以使工程结构更加简洁，也可以方便我们阅读和编辑； 新建一个Helloworld项目这是一个测试用的Widget项目，工程文件的结构是这样的： 12345678$ E:\\QT\\Helloworld\\Helloworld&gt;tree /fE:. Helloworld.pro Helloworld.pro.user main.cpp mainwindow.cpp mainwindow.h mainwindow.ui 使用子文件夹对项目文件分类然后，我们添加一个Widget界面，命名为”Welcome”，用于实现Helloworld工程的一个子界面功能;添加完成后，工程文件的结构变为: 1234567891011$ E:\\QT\\Helloworld\\Helloworld&gt;tree /fE:. Helloworld.pro Helloworld.pro.user main.cpp mainwindow.cpp mainwindow.h mainwindow.ui welcome.cpp welcome.h welcome.ui 此时，对于和Welcome这个子界面相关的文件，我们可以使用一个子文件夹，如”welcome”去存放所有和Welcome相关的文件：1.在Helloworld项目下新建一个文件夹，然后将需要分类的文件移动到文件夹下，并新建一个文件，命名为welcome.pri，此时的结构变为： 1234567891011121314$ E:\\QT\\Helloworld\\Helloworld&gt;tree /fE:.│ Helloworld.pro│ Helloworld.pro.user│ main.cpp│ mainwindow.cpp│ mainwindow.h│ mainwindow.ui│└─welcome welcome.cpp welcome.h welcome.pri welcome.ui 2.在Qt中，我们通过Add Existing Directory将新建的welcome文件夹及所有文件添加到Helloworld工程中(此时会自动将原有的文件清除，也可以先手动从project中移除);编辑welcome.pri文件: 123456789$ cat welcome/welcome.priSOURCES += \\ $$PWD/welcome.cppHEADERS += \\ $$PWD/welcome.hFORMS += \\ $$PWD/welcome.ui 3.在Helloworld.pro文件中添加一行代码: 1include($$PWD/welcome/welcome.pri) 4.执行重新构建Helloworld工程即可;","link":"/2020/02/08/Qt_creator%E5%B7%A5%E7%A8%8B%E6%96%87%E4%BB%B6%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E5%AD%90%E6%96%87%E4%BB%B6%E5%A4%B9%E5%88%86%E7%B1%BB/"},{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","link":"/2020/01/19/hello-world/"}],"tags":[{"name":"github","slug":"github","link":"/tags/github/"},{"name":"blog","slug":"blog","link":"/tags/blog/"},{"name":"Qt","slug":"Qt","link":"/tags/Qt/"},{"name":"Qt for windows","slug":"Qt-for-windows","link":"/tags/Qt-for-windows/"},{"name":"Qt pro-Setting","slug":"Qt-pro-Setting","link":"/tags/Qt-pro-Setting/"}],"categories":[{"name":"github","slug":"github","link":"/categories/github/"},{"name":"Qt","slug":"Qt","link":"/categories/Qt/"}]}